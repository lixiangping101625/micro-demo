spring.application.name=stream-sample
#server.port=63000
#server.port=63002
server.port=63003

###########################
######rabbitmq
###########################
spring.rabbitmq.host=121.40.93.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=123456


####绑定两个信道到同一个topic
spring.cloud.stream.bindings.myTopic.destination=broadcast
spring.cloud.stream.bindings.myTopicOut.destination=broadcast

#消费分组
spring.cloud.stream.bindings.group-consumer.destination=group-topic
spring.cloud.stream.bindings.group-producer.destination=group-topic
spring.cloud.stream.bindings.group-consumer.group=Group-A

#####################
#延迟消息
#####################
spring.cloud.stream.bindings.delayed-consumer.destination=delayed-topic
spring.cloud.stream.bindings.delayed-producer.destination=delayed-topic
# 指定producer的exchange类型是delay
spring.cloud.stream.rabbit.bindings.delayed-producer.producer.delayed-exchange=true

#####################
#异常消息（单机版重试）
#####################
spring.cloud.stream.bindings.error-consumer.destination=error-out-topic
spring.cloud.stream.bindings.error-producer.destination=error-out-topic
#重试次数（本机重试-当前consumer中重试）.次数等于1，相当于不重试
spring.cloud.stream.bindings.error-consumer.consumer.max-attempts=2


#####################
#异常消息（联机版重试-requeue）
#####################
spring.cloud.stream.bindings.requeue-consumer.destination=requeue-topic
spring.cloud.stream.bindings.requeue-producer.destination=requeue-topic
# 和retry冲突，所以强制设置消费者最大重试次数为1，失败后将消息退回到队列中，让其他消费者消费
spring.cloud.stream.bindings.requeue-consumer.consumer.max-attempts=1
# 多个消费者（测试消息回退）
spring.cloud.stream.bindings.requeue-consumer.group=requeue-A
# 仅对当前的requeue-consumer开启requeue
spring.cloud.stream.rabbit.bindings.requeue-consumer.consumer.requeue-rejected=true
# 全局开启requeue
#spring.rabbitmq.listener.simple.default-requeue-rejected=true


#################################
######死信队列
#################################
spring.cloud.stream.bindings.dlq-consumer.destination=dlq-topic
spring.cloud.stream.bindings.dlq-producer.destination=dlq-topic
spring.cloud.stream.bindings.dlq-consumer.group=dlq-group
spring.cloud.stream.bindings.dlq-consumer.consumer.max-attempts=2
# 初始化项目时向rabbitmq中添加一个死信队列（默认：topic.dlq）
spring.cloud.stream.rabbit.bindings.dlq-consumer.consumer.auto-bind-dlq=true


#################################
######Fallback
#################################
spring.cloud.stream.bindings.fallback-consumer.destination=fallback-topic
spring.cloud.stream.bindings.fallback-producer.destination=fallback-topic
spring.cloud.stream.bindings.fallback-consumer.group=fallback-group
spring.cloud.stream.bindings.fallback-consumer.consumer.max-attempts=2


################################
####消费分区配置
################################
# 打开消费者的消费分区功能
spring.cloud.stream.bindings.group-consumer.consumer..partitioned=true
# 两个消费分区
spring.cloud.stream.bindings.group-producer.producer.partition-count=2
# SpEL表达式 KeyResolver
# 只有索引参数为1的节点（消费者），才能消费消息
spring.cloud.stream.bindings.group-producer.producer.partition-key-expression=1
# 当前消费者者总数
spring.cloud.stream.instance-count=1
# 最大值是instance-count-1，标识当前节点的索引号
spring.cloud.stream.instance-index=1




management.security.enabled=true
management.endpoints.web.exposure.include='*
management.endpoint.health.show-details=always